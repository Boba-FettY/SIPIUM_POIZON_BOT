import logging
from telegram.ext import Application, MessageHandler, filters, \
    CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler
from config import BOT_TOKEN
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, \
    InlineKeyboardButton, Update, ReplyKeyboardRemove

start_reply_keyboard = [['üí∞–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'], ['üîé–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']]
admin_reply_keyboard = [['üí∞–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'], ['üîé–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'], ['üõ†–ö—É—Ä—Å']]
start_markup = ReplyKeyboardMarkup(start_reply_keyboard, one_time_keyboard=False)
admin_markup = ReplyKeyboardMarkup(admin_reply_keyboard, one_time_keyboard=False)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
admin_list = [1320663119, 565778929]
logger = logging.getLogger(__name__)


async def start(update, context):
    id_user = update.message.from_user.id
    if id_user in admin_list:
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Ö–æ–∑—è–∏–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚¨áÔ∏è')
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç!)\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ä–∞—Å—á—ë—Ç–æ–º –∑–∞–∫–∞–∑–∞ —Å POIZON\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª—é–±–æ–π –≤–µ—â–∏ —Å POIZON"
            " –æ—Ç –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∞–º–æ–π –ø–ª–æ—â–∞–¥–∫–µ, –¥–æ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–µ–±–µ –≤ —Ä—É–∫–∏\n\n"
            "–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —Å–º–æ–≥—É —Ä–µ—à–∏—Ç—å, –æ–±—Ä–∞—Ç–∏—Å—å"
            " –∫ –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –æ–Ω–∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å 10:00"
            " –¥–æ 22:00 –ø–æ –ú–°–ö:\n\n"
            "@sipium - –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–∞–∫–∞–∑–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–µ—â–µ–π"
            "@r_out_t - –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚¨áÔ∏è")


async def money_change(update, context):
    print(111111111111111111111111111111111111111111111111111111111111111111111111111)
    try:
        q = float(update.message.text[1:])
        with open('money.txt', 'w') as mn:
            mn.truncate(0)
        with open('money.txt', 'w') as mn:
            mn.write(update.message.text[1:])
        await update.message.reply_text('–ö—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!')
    except Exception:
        pass


async def price(update, context):
    await update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–≤–∞—Ä–∞:')
    return 1


async def info(update, context):
    await update.message.reply_text(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üîç\n\n'
                                    f'–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å'
                                    f' –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤—ã–∫—É–ø–∞ –∂–µ–ª–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –ø–ª–æ—â–∞–¥–∫–∏ POIZON\n\n'
                                    f'–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¢–µ—Ö–Ω–∏–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω—ã–µ'
                                    f' —Å–æ–æ–±—â–µ–Ω–∏—è\n\n@sipium\n@r_out_t')


async def money(update, context):
    with open('money.txt') as dengi:
        kr = dengi.read()
    await update.message.reply_text(f'–î–µ–π—Å—Ç–≤—É–π—â–∏–π –∫—É—Ä—Å: {kr}')
    id_user = update.message.from_user.id
    if id_user in admin_list:
        keyboard = [[InlineKeyboardButton("‚èÆ", callback_data=f"0"),
                     InlineKeyboardButton("‚è™", callback_data=f"1"),
                     InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"2"),
                     InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"3"),
                     InlineKeyboardButton("Ô∏è‚è©", callback_data=f"4"),
                     InlineKeyboardButton("Ô∏è‚è≠", callback_data=f"5")],

            [InlineKeyboardButton("‚úÖ–°–º–µ–Ω–∏—Ç—å", callback_data=f"—Å–º")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f'–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å {kr}', reply_markup=reply_markup)


async def first(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        keyboard = [
            [
                InlineKeyboardButton("üëü–ö—Ä–æ—Å—Å–æ–≤–∫–∏", callback_data=f"–∫—Ä{float(update.message.text)}"),
                InlineKeyboardButton("üëï–û–¥–µ–∂–¥–∞", callback_data=f"–æ–¥{float(update.message.text)}"),
            ],
            [InlineKeyboardButton("üï∂–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", callback_data=f"–∞–∫{float(update.message.text)}")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f'–ö–∞–∫–æ–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=reply_markup)
    except Exception:
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!')
    return ConversationHandler.END


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


async def button(update, context):
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    await query.answer()
    if query.data[:2] in ('–∫—Ä', '–æ–¥', '–∞–∫'):
        last_mn = float(query.data[2:])
        omsk = query.data[:2]
        qq = {'–∫—Ä': 1950, '–æ–¥': 1400, '–∞–∫': 900}
        k = 0
        with open('money.txt') as dengi:
            k = dengi.read()
            print(k)
        k = float(k)
        k *= last_mn
        k += qq[omsk]
        k *= 1.04
        k += 950
        obr = {'–∫—Ä': 'üëü–ö—Ä–æ—Å—Å–æ–≤–∫–∏', '–æ–¥': 'üëï–û–¥–µ–∂–¥–∞', '–∞–∫': 'üï∂–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'}
        await query.message.reply_text(f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –≤–∞—à —Ç–æ–≤–∞—Ä \n'{obr[omsk]}'  -  {round(k, 2)} ‚ÇΩ")
        await query.delete_message()
    elif query.data in ('0', '1', '2', '3', '4', '5'):
        qwerty = {'0': -1, '1' : -0.1, '2': -0.01, '3': 0.01, '4': 0.1, '5': 1}
        a = float(query.message.text[14:])
        a += qwerty[query.data]
        keyboard = [[InlineKeyboardButton("‚èÆ", callback_data=f"0"),
                     InlineKeyboardButton("‚è™", callback_data=f"1"),
                     InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"2"),
                     InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"3"),
                     InlineKeyboardButton("Ô∏è‚è©", callback_data=f"4"),
                     InlineKeyboardButton("Ô∏è‚è≠", callback_data=f"5")],

                    [InlineKeyboardButton("‚úÖ–°–º–µ–Ω–∏—Ç—å", callback_data=f"—Å–º")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f'–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å {round(a, 2)}', reply_markup=reply_markup)
    elif query.data == '—Å–º':
        try:
            aa = query.message.text[14:]
            with open('money.txt', 'w') as mn:
                mn.truncate(0)
            with open('money.txt', 'w') as mn:
                mn.write(aa)
            await query.edit_message_text('–ö—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!')
        except Exception:
            pass


def main():
    application = Application.builder().token(BOT_TOKEN).build()
    conv_hand_change = ConversationHandler(
        entry_points=[CommandHandler('button', button)],

        states={
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, money_change)],
        },

        fallbacks=[CommandHandler('stop', stop)]
    )
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('price', price)],

        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first)],
        },

        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(conv_hand_change)
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("money", money))
    application.add_handler(CallbackQueryHandler(button))
    application.run_polling()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()


if __name__ == '__main__':
    main()
